[{"/home/arseniy/dev/itmo/soa/lab1-front/src/App.tsx":"1","/home/arseniy/dev/itmo/soa/lab1-front/src/api/marines-api.ts":"2","/home/arseniy/dev/itmo/soa/lab1-front/src/api/ship-api.ts":"3","/home/arseniy/dev/itmo/soa/lab1-front/src/index.tsx":"4","/home/arseniy/dev/itmo/soa/lab1-front/src/utils/MarineXmlExtensions.ts":"5","/home/arseniy/dev/itmo/soa/lab1-front/src/components/SpaceMarine.tsx":"6","/home/arseniy/dev/itmo/soa/lab1-front/src/components/ship/CreateShip.tsx":"7","/home/arseniy/dev/itmo/soa/lab1-front/src/components/forms/Features.tsx":"8","/home/arseniy/dev/itmo/soa/lab1-front/src/components/forms/Ship.tsx":"9","/home/arseniy/dev/itmo/soa/lab1-front/src/components/forms/MarineList.tsx":"10","/home/arseniy/dev/itmo/soa/lab1-front/src/components/ship/LoadMarine.tsx":"11"},{"size":1166,"mtime":1609885730831,"results":"12","hashOfConfig":"13"},{"size":1207,"mtime":1610999232097,"results":"14","hashOfConfig":"15"},{"size":2116,"mtime":1615032343300,"results":"16","hashOfConfig":"15"},{"size":219,"mtime":1609267220163,"results":"17","hashOfConfig":"15"},{"size":3207,"mtime":1611100502373,"results":"18","hashOfConfig":"15"},{"size":3458,"mtime":1611101585811,"results":"19","hashOfConfig":"15"},{"size":1518,"mtime":1610998132336,"results":"20","hashOfConfig":"15"},{"size":3298,"mtime":1610807860398,"results":"21","hashOfConfig":"22"},{"size":1435,"mtime":1615032484605,"results":"23","hashOfConfig":"15"},{"size":5358,"mtime":1611125595553,"results":"24","hashOfConfig":"15"},{"size":1524,"mtime":1610804382507,"results":"25","hashOfConfig":"15"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t3xi72",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xqszg4",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"qxkbpg",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/home/arseniy/dev/itmo/soa/lab1-front/src/App.tsx",[],"/home/arseniy/dev/itmo/soa/lab1-front/src/api/marines-api.ts",[],"/home/arseniy/dev/itmo/soa/lab1-front/src/api/ship-api.ts",[],"/home/arseniy/dev/itmo/soa/lab1-front/src/index.tsx",[],[],"/home/arseniy/dev/itmo/soa/lab1-front/src/utils/MarineXmlExtensions.ts",["52","53"],"import {Chapter} from \"../model/Chapter\";\nimport {RawMarineEntity} from \"../api/utils/RawMarineEntity\";\nimport {ISpaceMarine} from \"../model/ISpaceMarine\";\nimport {xml2json} from \"xml-js\";\n\nexport function handleXml(text: string): Array<ISpaceMarine> {\n    let convertedJson = xml2json(text, {compact: true});\n    convertedJson = convertedJson.replace(/_/g, \"\");\n    const rawMarinesMap = JSON.parse(convertedJson).SpaceMarineCollection;\n    return parseMarineCollection(rawMarinesMap, text);\n}\n\nfunction parseMarineCollection(rawMarinesMap: any, text: string): Array<ISpaceMarine> {\n    if (Object.keys(rawMarinesMap).length === 0) {\n        return [];\n    }\n\n    let parsedMarines = rawMarinesMap.SpaceMarine;\n    if (!Array.isArray(parsedMarines)) {\n        parsedMarines = [parsedMarines];\n    }\n\n    let i = 0;\n    return parsedMarines.map(\n        (rawMarineEntity: RawMarineEntity): ISpaceMarine => {\n            const marine = parseMarine(rawMarineEntity);\n            const xmlText = getSpaceMarineXMLById(text, i);\n            i++;\n\n            marine.xmlText = xmlText;\n            return marine;\n        }\n    );\n}\n\nfunction parseChapter(chapter: any): Chapter {\n    const name: string = chapter && chapter.name ? chapter.name.text : \"\";\n    const parentLegion = chapter && chapter.parentLegion ? chapter.parentLegion.text : \"\";\n    const marinesCount = chapter && chapter.marinesCount ? chapter.marinesCount.text : \"\";\n    const world = chapter && chapter.world ? chapter.world.text : \"\";\n    return {\n        name: name,\n        marinesCount: marinesCount,\n        parentLegion: parentLegion,\n        world: world\n    }\n}\n\nfunction parseMarine(rawMarineEntity: RawMarineEntity) {\n    let chapter: Chapter | null = null;\n    if (rawMarineEntity.chapter) {\n        chapter = parseChapter(rawMarineEntity.chapter)\n    }\n    const id = rawMarineEntity.id.text;\n    const category = rawMarineEntity.category.text ? rawMarineEntity.category.text : \"Null category\";\n    const coordinates = {\n        x: rawMarineEntity.coordinates.x.text,\n        y: rawMarineEntity.coordinates.y.text\n    };\n    const creationDate = rawMarineEntity.creationDate ? new Date(rawMarineEntity.creationDate.text).toLocaleString() : \"\";\n    const health = rawMarineEntity.health ? Number(rawMarineEntity.health.text) : null;\n    const meleeWeapon = rawMarineEntity.meleeWeapon ? rawMarineEntity.meleeWeapon.text : \"no weapon\";\n    const heartCount = rawMarineEntity.heartCount ? Number(rawMarineEntity.heartCount.text) : null;\n    const name = rawMarineEntity.name ? rawMarineEntity.name.text : \"\";\n\n    return {\n        category: category,\n        chapter: chapter,\n        coordinates: coordinates,\n        creationDate: creationDate,\n        health: health,\n        heartCount: heartCount,\n        id: id,\n        meleeWeapon: meleeWeapon,\n        name: name,\n        xmlText: \"\"\n    }\n}\n\n\nfunction getSpaceMarineXMLById(xmlText: string, id: number) {\n    const domParser = new DOMParser();\n    const dom = domParser.parseFromString(xmlText, \"application/xml\");\n\n    const node = <HTMLScriptElement>dom.childNodes[0];\n    const elements = node.getElementsByTagName(\"SpaceMarine\");\n\n    return elements[id].outerHTML;\n}\n","/home/arseniy/dev/itmo/soa/lab1-front/src/components/SpaceMarine.tsx",[],"/home/arseniy/dev/itmo/soa/lab1-front/src/components/ship/CreateShip.tsx",[],[],"/home/arseniy/dev/itmo/soa/lab1-front/src/components/forms/Features.tsx",["54"],"import React, {useState} from 'react';\nimport SpaceMarine from \"../SpaceMarine\";\nimport Config from \"../../api/Config.json\";\nimport { handleXml } from '../../utils/MarineXmlExtensions';\nimport { ISpaceMarine } from '../../model/ISpaceMarine';\n\nconst Features = () => {\n\n    const [summaryHealth, setSummaryHealth] = useState(\"\");\n    const [Category, setCategory] = useState(\"\");\n    const [marines, setMarines] = useState<ISpaceMarine[]>([]);\n    const [healthAmount, setHealthAmount] = useState(\"\");\n    const[message,setMessage] = useState(\"\");\n\n    const getSummaryHealth = async () => {\n        const url = Config.Url + \"/health\";\n        const response =  await fetch(url, {\n            method: \"GET\"\n        });\n        setSummaryHealth(await response.text());\n    }\n    const renderMarines = () => {\n        return marines.map(\n            // eslint-disable-next-line react/jsx-key\n            (marine) => <SpaceMarine marine={marine} callForUpdate={getMarines} />\n        )\n    }\n\n    const getMarines = async () => {\n        const url = Config.Url + \"/compare/\" + healthAmount;\n        const response =  await fetch(url, {\n            method: \"GET\"\n        });\n        if (response.status === 200){\n            let updatedMarines : Array<ISpaceMarine> = [];\n            const responseText = await response.text();\n            if (response.status === 200) {\n                updatedMarines = await handleXml(responseText);\n            }\n\n            setMarines(updatedMarines);\n        }\n    }\n\n    const changeHealth = (event : React.FormEvent<HTMLInputElement>) => {\n        setHealthAmount(event.currentTarget.value);\n    }\n    function changeCategory(event : React.FormEvent<HTMLInputElement>) {\n        setCategory(event.currentTarget.value);\n    }\n\n    async function deleteMarine() {\n        const url = Config.Url + \"/random/\" + Category;\n        const response =  await fetch(url, {\n            method: \"DELETE\"\n        });\n        setMessage(await response.text())\n\n    }\n\n    return (\n        <div>\n            <h2>\n                Features\n            </h2>\n\n            <div className=\"form-container\">\n                <h4 >All health</h4>\n                <div>\n                    <button className=\"cool-button\" onClick={getSummaryHealth}>Get summary health</button>\n                    <div>Summary health = {summaryHealth}</div>\n                </div>\n            </div>\n\n            <div>\n                <div className=\"form-container\">\n                    <h4 >Delete random by category</h4>\n                    <div>\n                        <input type=\"text\" onChange={changeCategory}/>\n                        <button className=\"cool-button delete\" onClick={deleteMarine}>Delete random</button>\n                        <div>{message? message : \"\"}</div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"form-container\">\n                <h4 >Marines with health greater</h4>\n                <div>\n                    <input type=\"text\" onChange={changeHealth}/>\n                    <button className=\"cool-button\" onClick={getMarines}>Get healthier marines</button>\n                    {marines !== [] ? renderMarines() : \"\"}\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default Features;\n","/home/arseniy/dev/itmo/soa/lab1-front/src/components/forms/Ship.tsx",[],"/home/arseniy/dev/itmo/soa/lab1-front/src/components/forms/MarineList.tsx",["55"],"/home/arseniy/dev/itmo/soa/lab1-front/src/components/ship/LoadMarine.tsx",[],{"ruleId":"56","severity":1,"message":"57","line":13,"column":47,"nodeType":"58","messageId":"59","endLine":13,"endColumn":50,"suggestions":"60"},{"ruleId":"56","severity":1,"message":"57","line":36,"column":32,"nodeType":"58","messageId":"59","endLine":36,"endColumn":35,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":7,"column":18,"nodeType":"64","messageId":"65","endLine":7,"endColumn":23},{"ruleId":"66","severity":1,"message":"67","line":16,"column":12,"nodeType":"68","messageId":"69","endLine":16,"endColumn":19},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["70","71"],["72","73"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'isError' is assigned a value but never used.","Identifier","unusedVar",{"messageId":"74","fix":"75","desc":"76"},{"messageId":"77","fix":"78","desc":"79"},{"messageId":"74","fix":"80","desc":"76"},{"messageId":"77","fix":"81","desc":"79"},"suggestUnknown",{"range":"82","text":"83"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"82","text":"84"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"85","text":"83"},{"range":"85","text":"84"},[542,545],"unknown","never",[1159,1162]]